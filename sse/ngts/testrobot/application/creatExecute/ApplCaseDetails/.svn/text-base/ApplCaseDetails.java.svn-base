package sse.ngts.testrobot.application.creatExecute.ApplCaseDetails;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import sse.ngts.testrobot.application.functions.AppSheetRead;
import sse.ngts.testrobot.application.functions.ApplCaseScriptSort;
import sse.ngts.testrobot.engine.app.ApplExecuteResultDialog;
import sse.ngts.testrobot.engine.unit.ApplCase;
import sse.ngts.testrobot.engine.unit.ApplConstValues;

public class ApplCaseDetails 
{
    private ArrayList<ApplCase> caseDetails;



	/***************************************************************************
     *函数功能：读取场景文件，获取需要的用例的详细信息
     *函数输入：
     *File file                         －－场景文件
     *String sheetName                  －－场景表单名
     *int num,HashSet<String>filterStr  －－用例列表
     *String scene                      －－场景ID
     *函数返回值：
     *       空
     **************************************************************************/
    public Boolean readCaseSheet(File file,String sheetName,int num,HashSet<String>filterStr,String scene)
    {
    	Logger.getLogger(ApplConstValues.logName).
            entering("ApplCaseDetails", "readCaseSheet");
    	try
        {
            Hashtable dupCaseChk = new Hashtable();
            FileInputStream in = new FileInputStream(file);
            HSSFWorkbook workbook = new HSSFWorkbook(in);
            HSSFSheet sheet = workbook.getSheet(sheetName);
            if (sheet == null)
            {

            }

            int numberOfRows = sheet.getPhysicalNumberOfRows();
            String titleDesc[] = null;
            ArrayList<ApplCase> scripts = new ArrayList<ApplCase>();

            for (int j = num; j < numberOfRows; j++)
            {
                HSSFRow row = sheet.getRow(j);
                if (row == null)
                {
                    continue;
                }
                if (j == num)
                {
                    titleDesc = AppSheetRead.getTitleDesc(row);
                    if(!AppSheetRead.deteTilt(titleDesc,ApplConstValues.caseTitle, file.getAbsolutePath()))
                		return false;   
                }
                else
                {
                    Hashtable values = AppSheetRead.wrapValues(titleDesc, row);
                    if(values.get(ApplConstValues.sceneType).toString().isEmpty())
                    	continue;
                    String cc = strChg(values.get(ApplConstValues.sceneType).toString(),3);
                    if(values.get(ApplConstValues.sceneId).toString().isEmpty())
                    	continue;
                    cc = cc+"_"+strChg(values.get(ApplConstValues.sceneId).toString(),3);
                    cc = scene +"_"+ cc;
                  //  System.out.println(cc);
                    if(!isInStr(cc,filterStr))
                    	continue;
                    ApplDetails script = new ApplDetails();
                    script.setDetails(values,scene);
                    scripts.add(script.getcaseDescript());
                   
                }
            }
            this.caseDetails = scripts;
            Collections.sort(caseDetails,new ApplCaseScriptSort());
            Logger.getLogger(ApplConstValues.logName).
               log(Level.INFO, "读取文件{0}成功",file.getAbsolutePath());
 
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
            Logger.getLogger(ApplConstValues.logName).
              log(Level.SEVERE, "找不到文件{0}",file.getAbsolutePath());
        	Logger.getLogger(ApplConstValues.logName).
	         log(Level.SEVERE, "执行手册生成失败 ");
			ApplExecuteResultDialog.viewError("执行失败，找不到文件"+file.getAbsolutePath(), "ERROR");
            return false;

        }
        catch (Exception e)
        {
            e.printStackTrace();
            Logger.getLogger(ApplConstValues.logName).
               log(Level.SEVERE, "读取文件{0}失败",file.getName());
        	Logger.getLogger(ApplConstValues.logName).
	         log(Level.SEVERE, "执行手册生成失败 ");
			ApplExecuteResultDialog.viewError("执行失败，读文件"+file.getAbsolutePath() +"失败", "ERROR");
            return false;
           
        }
        return true;


    }
   /*******************************************
    * 函数功能：判断没个用例是否在 用例列表数组中
    * 输入：
    * @param cc                －－用判断的用例
    * @param filterStr         －－用例列表数组
    * 函数返回值：
    * boolean
    *********************************************/
    public boolean isInStr(String cc,HashSet<String>filterStr)
    {
    	if(filterStr == null)
    		return true;
	    Iterator<String> b = filterStr.iterator();
	    while (b.hasNext())
	    {
	        String c = b.next();
	        if(cc.equalsIgnoreCase(c))
	        	return true;
	    }
    	return false;
    	
    }
    
    public  String strChg(String c,int charLength)
    {

    	Float  cc = Float.valueOf(c);
    	String  a = String.valueOf(cc.intValue());
    	while (a.length() < charLength)
            a = "0" + a;
        return a;
    }

    public ArrayList<ApplCase> getCaseDetails() {
		return caseDetails;
	}


}
